// Bitmask mapping (least siginificant bits): bits [1, 9] are errors reading a
// sensor, with its sensor_ids value mapping to the bit number. Bit 10 is an
// error when writing a file.
// NOTE(ingar): bitmask will probably be scrapped from libtm and might be moved
// to lib_read_ads_sensors-or_whatever

static uint16_t _error_bitmask;

int libtm_set_error_flag(uint8_t n_bit)
{
    uint16_t mask = 1;
    if (n_bit > N_SENSORS + 1) // +1 for filewrite error
    {
        DEBUG(printf("Invalid sensor id; expected a value between 1 and %d inclusive, was actually %d\n",
                     N_SENSORS + 1, n_bit);)
        return -1;
    }

    _error_bitmask |= 1 << n_bit - 1;
    return 0;
}

uint16_t libtm_get_error_bitmask()
{
    return _error_bitmask;
}

void libtm_reset_error_bitmask()
{
    _error_bitmask = 0;
}

// Should fail when i=11, succeed otherwise
for (uint16_t i = 1; i < 12; ++i)
{
    libtm_set_error_flag(i);
    _error_bitmask = 0;
}

// Should succeed, and _error_bitmask should remain the same every iteration
for (uint16_t i = 0; i < 3; ++i)
{
    libtm_set_error_flag(5);
}


/**
 * @brief Checks if enough time has passed for given sensor_id to write it's data again.
 * @param time_struct_current_time Current time
 * @param sensor_id Sensor ID whose time of last writing should be compared to current time.
 * @return 1 if time passed is larger than sensor's sampling period, 0 elsewise.
 */
int _has_sample_period_passed_since_last_append(int sensor_id)
{

    int current_time_ms = (time_struct_current_time.tv_sec) * 1000 + (time_struct_current_time.tv_usec) / 1000;

    int sensor_last_time_append_ms = last_sample_time_ms[sensor_id - sensor_ID_offset];

    if ((current_time_ms - sensor_last_time_append_ms) >= (int)sensor_list[sensor_id - sensor_ID_offset].sample_period_ms)
    {
        last_sample_time_ms[sensor_id - sensor_ID_offset] = current_time_ms;
        return 1;
    }
    else
    {

        return 0;
    }
}

int libtm_set_sensor_data(float x, float y, float z, uint8_t sensor_id, struct timeval timestamp)
{
    if (sensor_id < 1 || sensor_id >= IMTQ_HOUSEKEEPING)
    {
        DEBUG(printf("Invalid sensor id when setting sensor data; expected a value "
                     "between 1 and %d "
                     "inclusive, was actually %d\n",
                     IMTQ_HOUSEKEEPING - 1, sensor_id);)
        return -1;
    }

    struct vec3 *sensor_data = (struct vec3 *)&_latest_polled_data;
    uint16_t *elapsed_time_since_last_sensor_write =
        (uint16_t *)&_elapsed_time_since_last_sensor_write_ms;

    sensor_data[sensor_id - 1].x = x;
    sensor_data[sensor_id - 1].y = y;
    sensor_data[sensor_id - 1].z = z;
    sensor_data[sensor_id - 1].timestamp_last_write = timestamp;
    elapsed_time_since_last_sensor_write[sensor_id - 1];

// uint8_t sensors_to_write[N_SENSORS] = {0};
// uint8_t n_sensors_to_write = 0;
// struct timeval *elapsed_time_since_last_sensor_write =
//     (struct timeval *)&_elapsed_time_since_last_sensor_write_ms;

// for (int i = 0; i < N_SENSORS;
//      ++i) // Change this to assigning the sensor id instead?
// {
//     // elapsed_time_since_last_sensor_write[i] +=
//     //     timeval_current_time.tv_usec * 1000;
//     // (sensor_write_intervals[i].tv_sec == 0 && sensor_write_intervals[i].tv_usec == 0) ||
//     if ((elapsed_time_since_last_sensor_write[i].< sensor_write_intervals[i]))
//     {
//         continue;
//     }

//     sensors_to_write[n_sensors_to_write++] = i;
//     elapsed_time_since_last_sensor_write[i] = 0;
// }

// Fill the buffer, and write to file if there are remaining data to write,
// but the remaining buffer size cannot hold any of it
// NOTE(ingar): Ask Sigmund what the best way to check the remaining size of a

// struct timeval timeval_current_time;
// gettimeofday(&timeval_current_time, NULL);

static struct sensor_time_data_ms _elapsed_time_since_last_sensor_write_ms = {0};

// NOTE(ingar): The timeval struct is 16 bytes on my machine, however
// it should be only 8 bytes on eos (2 uint32_t)
// 3 * 4 = 12 bytes
struct __attribute__((__packed__)) libtm_vec3
{
    float x;
    float y;
    float z;
};

// 1 + 8 + 12 = 21 bytes
struct __attribute__((__packed__)) libtm_vec3_packet
{
    uint8_t sensor_id;
    struct timeval timestamp_last_write;
    struct libtm_vec3 data;
};

// 11 * 2 = 22 bytes
struct __attribute__((__packed__)) libtm_iMTQ_housekeeping_data
{
    uint16_t dig_volt;    /**< Measured voltage of digital supply  */
    uint16_t analog_volt; /**< Measured voltage of analogue supply  */
    uint16_t dig_curr;    /**< Measured current of digital supply  */
    uint16_t analog_curr; /**< Measured current of analogue supply  */
    int16_t meas_curr_x;  /**< Measured current through X-axis coil  */
    int16_t meas_curr_y;  /**< Measured current through Y-axis coil  */
    int16_t meas_curr_z;  /**< Measured current through Z-axis coil  */
    int16_t coil_temp_x;  /**< Measured temperature in X-axis coil  */
    int16_t coil_temp_y;  /**< Measured temperature in Y-axis coil  */
    int16_t coil_temp_z;  /**< Measured temperature in Z-axis coil  */
    int16_t MCU_temp;     /**< Temperature measurement of the MCU  */
};

// Needed to make the packet structs because otherwise the pointer arithmetic
// on the data would be fucked up

// 1 + 8 + 22 = 31 bytes
struct __attribute__((__packed__)) libtm_iMTQ_housekeeping_packet
{
    // We will always know this id, but we whould probably have the
    // id in the struct anyway for consistency
    uint8_t sensor_id;
    struct timeval timestamp_last_write;
    struct libtm_iMTQ_housekeeping_data data;
};

//  8 * 21 + 22 = 186 bytes
struct __attribute__((__packed__)) ADCS_sensor_data
{
    struct libtm_vec3_packet IMU_Mean_Gyro_XYZ;
    struct libtm_vec3_packet IMU_Mean_Magnetometer;
    struct libtm_vec3_packet Controller_output_raw;
    struct libtm_vec3_packet Controller_output_to_imtq;
    struct libtm_vec3_packet envModels_Mag_field;
    struct libtm_vec3_packet envModels_Sun_position;
    struct libtm_vec3_packet envModels_radius_ECI;
    struct libtm_vec3_packet envModels_quarternion_ECI;
    struct libtm_iMTQ_housekeeping_packet iMTQ_housekeeping;
};

#if 1
// NOTE(ingar): Rename this? Make this public?
// Still not sure where the "tick" is going to happen
void _libtm_write()
{
    struct timeval *sensor_write_intervals = (struct timeval *)&_sensor_write_intervals_ms;
    struct libtm_packet *latest_polled_data = (struct libtm_packet *)&_latest_polled_data;
    
    for (int i = 0; i < IMTQ_HOUSEKEEPING; ++i)
    {
        struct libtm_packet sensor_packet = latest_polled_data[i];
        struct timeval sensor_write_interval = sensor_write_intervals[i];
        struct libtm_packet_header sensor_header = sensor_packet.header;

        if (sensor_header.timestamp.tv_sec <= sensor_write_interval.tv_sec &&
            sensor_header.timestamp.tv_usec < sensor_write_interval.tv_usec) // NOTE(ingar): Make this <= ?
        {
            continue; // Not enough time has passed since last write
        }

        if (_file_write_buffer.remaining_bytes + sensor_packet.size >= 256)
        {
            _write_buffer_to_file();
            memset(&_file_write_buffer, 0, sizeof(struct file_write_buffer)); // Reset buffer
            _file_write_buffer.remaining_bytes = 256;
        }

        memcpy(&_file_write_buffer.buffer[256 - _file_write_buffer.remaining_bytes],
               &sensor_packet, sensor_packet.size);
    }
}
#endif

// NOTE(ingar): Just make this 
//  8 * 21 + 22 = 186 bytes
struct __attribute__((__packed__)) ADCS_sensor_data
{
    struct libtm_packet IMU_Mean_Gyro_XYZ;
    struct libtm_packet IMU_Mean_Magnetometer;
    struct libtm_packet Controller_output_raw;
    struct libtm_packet Controller_output_to_imtq;
    struct libtm_packet envModels_Mag_field;
    struct libtm_packet envModels_Sun_position;
    struct libtm_packet envModels_radius_ECI;
    struct libtm_packet envModels_quarternion_ECI;
    struct libtm_packet iMTQ_housekeeping;
};__NO_INLINE__

{
    struct iMTQ_split_packet iMTQ_first_packet = {0};
    struct iMTQ_split_packet iMTQ_second_packet = {0};

    iMTQ_first_packet.header = sensor_packet.header;
    iMTQ_second_packet.header = sensor_packet.header;
    uint8_t half_data_size = sensor_packet.size / 2; // = 11
    // TODO(ingar): Figure out some way to make this all one memcpy
    memcpy(iMTQ_first_packet.data, sensor_packet.data, half_data_size);
    memcpy(iMTQ_second_packet.data, sensor_packet.data + half_data_size, half_data_size);

    memcpy(_file_write_buffer.buffer[256 - _file_write_buffer.remaining_bytes], 
            &iMTQ_first_packet, iMTQ_split_packet_size);
    _file_write_buffer.remaining_bytes -= iMTQ_split_packet_size;

    memcpy(_file_write_buffer.buffer[256 - _file_write_buffer.remaining_bytes],
            &iMTQ_second_packet, iMTQ_split_packet_size);
    _file_write_buffer.remaining_bytes -= iMTQ_split_packet_size;

    8 * 9 = 72 bytes
    endre til uint64_t bruke timediff fra obc_main
}
struct sensor_time_data_us
{
    uint64_t IMU_Mean_Gyro_XYZ;
    uint64_t IMU_Mean_Magnetometer;
    uint64_t Controller_output_raw;
    uint64_t Controller_output_to_imtq;
    uint64_t envModels_Mag_field;
    uint64_t envModels_Sun_position;
    uint64_t envModels_radius_ECI;
    uint64_t envModels_quarternion_ECI;
    uint64_t iMTQ_housekeeping;
};


#if TESTING
static void _run_tests()
{
    struct timeval imtq_time_interval = {10, 0};
    struct libtm_iMTQ_housekeeping_data iMTQ_housekeeping_data;
    iMTQ_housekeeping_data.dig_volt = 1;
    iMTQ_housekeeping_data.analog_volt = 2;
    iMTQ_housekeeping_data.dig_curr = 3;
    iMTQ_housekeeping_data.analog_curr = 4;
    iMTQ_housekeeping_data.meas_curr_x = 5;
    iMTQ_housekeeping_data.meas_curr_y = 6;
    iMTQ_housekeeping_data.meas_curr_z = 7;
    iMTQ_housekeeping_data.coil_temp_x = 8;
    iMTQ_housekeeping_data.coil_temp_y = 9;
    iMTQ_housekeeping_data.coil_temp_z = 10;
    iMTQ_housekeeping_data.MCU_temp = 11;

    struct libtm_iMTQ_housekeeping_packet iMTQ_housekeeping_packet = {
        .sensor_id = IMTQ_HOUSEKEEPING,
        .timestamp_last_write = imtq_time_interval,
        .data = iMTQ_housekeeping_data};

    libtm_set_iMTQ_housekeeping_data((const void *)&iMTQ_housekeeping_packet);

    struct libtm_vec3_packet sensor_data = {.sensor_id = 1,
                                            .timestamp_last_write = imtq_time_interval,
                                            .data = {1, 2, 3}};

    struct libtm_vec3_packet sensor_data2 = {.sensor_id = 2,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {4, 5, 6}};

    struct libtm_vec3_packet sensor_data3 = {.sensor_id = 3,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {7, 8, 9}};

    struct libtm_vec3_packet sensor_data4 = {.sensor_id = 4,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {10, 11, 12}};

    struct libtm_vec3_packet sensor_data5 = {.sensor_id = 5,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {13, 14, 15}};

    struct libtm_vec3_packet sensor_data6 = {.sensor_id = 6,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {16, 17, 18}};

    struct libtm_vec3_packet sensor_data7 = {.sensor_id = 7,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {19, 20, 21}};

    struct libtm_vec3_packet sensor_data8 = {.sensor_id = 8,
                                             .timestamp_last_write = imtq_time_interval,
                                             .data = {22, 23, 24}};

    libtm_set_sensor_data((const void *)&sensor_data, 1);
    libtm_set_sensor_data((const void *)&sensor_data2, 2);
    libtm_set_sensor_data((const void *)&sensor_data3, 3);
    libtm_set_sensor_data((const void *)&sensor_data4, 4);
    libtm_set_sensor_data((const void *)&sensor_data5, 5);
    libtm_set_sensor_data((const void *)&sensor_data6, 6);
    libtm_set_sensor_data((const void *)&sensor_data7, 7);
    libtm_set_sensor_data((const void *)&sensor_data8, 8);
}

static void _print_ADCS_data()
{
    struct libtm_vec3_packet *sensor_packets =
        (struct libtm_vec3_packet *)&_latest_polled_data;
    for (int i = 0; i < IMTQ_HOUSEKEEPING - 1; ++i)
    {
        struct libtm_vec3_packet sensor_packet = sensor_packets[i];
        printf("Sensor %d values: tv_sec: %ld, tv_usec: %ld, X: %f, Y: %f, Z: %f\n",
               sensor_packet.sensor_id, sensor_packet.timestamp_last_write.tv_sec,
               sensor_packet.timestamp_last_write.tv_usec, sensor_packet.data.x,
               sensor_packet.data.y, sensor_packet.data.z);
    }

    printf("\n");

    struct libtm_iMTQ_housekeeping_packet iMTQ_housekeeping_packet =
        _latest_polled_data.iMTQ_housekeeping;
    printf("iMTQ Housekeeping values:\n tv_sec: %ld, tv_usec: %ld, dig_volt: %d,\n "
           "analog_volt: %d, dig_curr: %d, analog_curr: %d, meas_curr_x: %d,\n "
           "meas_curr_y: %d, meas_curr_z: %d, coil_temp_x: %d, coil_temp_y: %d,\n "
           "coil_temp_z: %d, MCU_temp: %d\n",
           iMTQ_housekeeping_packet.timestamp_last_write.tv_sec,
           iMTQ_housekeeping_packet.timestamp_last_write.tv_usec,
           iMTQ_housekeeping_packet.data.dig_volt,
           iMTQ_housekeeping_packet.data.analog_volt,
           iMTQ_housekeeping_packet.data.dig_curr,
           iMTQ_housekeeping_packet.data.analog_curr,
           iMTQ_housekeeping_packet.data.meas_curr_x,
           iMTQ_housekeeping_packet.data.meas_curr_y,
           iMTQ_housekeeping_packet.data.meas_curr_z,
           iMTQ_housekeeping_packet.data.coil_temp_x,
           iMTQ_housekeeping_packet.data.coil_temp_y,
           iMTQ_housekeeping_packet.data.coil_temp_z,
           iMTQ_housekeeping_packet.data.MCU_temp);
}
#endif

void libtm_set_sensor_write_interval(uint64_t time_interval_us,
                                     uint8_t sensor_id)
{
    if (sensor_id < 1 || sensor_id > N_SENSORS)
    {
        DEBUG(printf("Invalid sensor id when setting sensor write interval; "
                     "expected a value between 1 and %d "
                     "inclusive, was actually %d\n",
                     N_SENSORS, sensor_packet.header.sensor_id);)
        return;
    }

    _sensor_write_intervals_us[sensor_id - 1] = time_interval_us;
}


uint64_t sensor_write_intervals_us_real[N_SENSORS] = {
        50000,
        50000,
        100000,
        100000,
        1000000,
        1000000,
        1000000,
        1000000,
        10000000,
    };














///////////////////////////////////////////////////////////////////////////////
// Test functions
///////////////////////////////////////////////////////////////////////////////

#if TEST

static void _print_file(int n_data)
{
    int fd = open(_active_file_path, O_RDONLY);
    if (fd < 0)
    {
        printf("Error opening file: %s\n", strerror(errno));
    }

    int n_imtq = n_data / 9;
    int buffer_size = n_data * PACKET_SIZE + n_imtq * PACKET_SIZE;
    uint8_t buffer[buffer_size];
    uint8_t *buf_pointer = buffer;
    int bytes_read = read(fd, buffer, buffer_size);

    if (bytes_read < 0)
    {
        printf("Error reading file: %s\n", strerror(errno));
    }

    for (; buf_pointer < &buffer[0] + buffer_size;)
    {
        struct libtm_packet_header *packet_header = (struct libtm_packet_header *)buf_pointer;
        buf_pointer += LIBTM_HEADER_SIZE;
        if (packet_header->sensor_id < 1 || packet_header->sensor_id > N_SENSORS)
        {
            printf("Print file invalid sensor id: %d\n", packet_header->sensor_id);
            continue;
        }

        printf("Sensor id: %d Timestap us: %ld ", packet_header->sensor_id, packet_header->timestamp_us);
        if (packet_header->sensor_id == IMTQ_HOUSEKEEPING)
        {

            uint16_t *first_four = (uint16_t *)buf_pointer;
            printf("%d %d %d %d ", first_four[0], first_four[1], first_four[2], first_four[3]);
            buf_pointer += 8;

            int16_t *last_in_first_packet = (int16_t *)buf_pointer;
            printf("%d %d", last_in_first_packet[0], last_in_first_packet[1]);
            buf_pointer += 4 + LIBTM_HEADER_SIZE;

            int16_t *second_packet = (int16_t *)buf_pointer;
            printf("%d %d %d %d %d\n", second_packet[0], second_packet[1], second_packet[2], second_packet[3], second_packet[4]);
            buf_pointer += 12;
        }
        else
        {
            float *vec3 = (float *)buf_pointer;
            printf("%f %f %f\n", vec3[0], vec3[1], vec3[2]);
            buf_pointer += 12;
        }
    }
}

float vec3[3] = {0};
struct libtm_iMTQ_housekeeping_data imtq = {0};

void generate_random_test_data(int iterations)
{
    struct timespec ts = {.tv_sec = 0, .tv_nsec = 10000000};

    for (int sensor_id = 1; iterations > 0; --iterations)
    {
        if (sensor_id > N_SENSORS)
        {
            sensor_id = 1;
        }
        int random = rand() % 5;

        struct timeval tv;
        gettimeofday(&tv, NULL);
        uint64_t timestamp_us = tv.tv_sec * 1000000 + tv.tv_usec;

        struct libtm_packet packet = {0};
        packet.header.sensor_id = sensor_id;
        packet.header.timestamp_us = timestamp_us;

        if (sensor_id == IMTQ_HOUSEKEEPING)
        {
            imtq.dig_volt = 1 + random;
            imtq.analog_volt = 2 + random;
            imtq.dig_curr = 3 + random;
            imtq.analog_curr = 4 + random;
            imtq.meas_curr_x = 5 + random;
            imtq.meas_curr_y = 6 + random;
            imtq.meas_curr_z = 7 + random;
            imtq.coil_temp_x = 8 + random;
            imtq.coil_temp_y = 9 + random;
            imtq.coil_temp_z = 10 + random;
            imtq.MCU_temp = 11 + random;

            packet.data = &imtq;
            packet.data_size = IMTQ_HK_SIZE;
        }
        else
        {
            vec3[0] = 1.0 + random;
            vec3[1] = 2.0 + random;
            vec3[2] = 3.0 + random;

            packet.data = &vec3;
            packet.data_size = sizeof(vec3);
        }

        ++sensor_id;
        printf("Debug data generation iteration %d\n", iterations);
        libtm_write_sensor_data(packet);
        nanosleep(&ts, NULL);
    }
}

int main()
{
    srand(time(NULL));
    uint64_t file_ring_buffer[5] = {0};
    uint8_t active_file_index = 0;

    uint64_t sensor_write_intervals_us[N_SENSORS] = {
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
        40000,
    };

    libtm_init(file_ring_buffer, &active_file_index, sensor_write_intervals_us);
    generate_random_test_data(256);
    _print_file(256);

    return 0;
}

#if TEST
#include <time.h>
#include <stdlib.h>
#include <errno.h>

struct __attribute__((__packed__)) libtm_iMTQ_housekeeping_data
{
    uint16_t dig_volt;    /**< Measured voltage of digital supply  */
    uint16_t analog_volt; /**< Measured voltage of analogue supply  */
    uint16_t dig_curr;    /**< Measured current of digital supply  */
    uint16_t analog_curr; /**< Measured current of analogue supply  */
    int16_t meas_curr_x;  /**< Measured current through X-axis coil  */
    int16_t meas_curr_y;  /**< Measured current through Y-axis coil  */
    int16_t meas_curr_z;  /**< Measured current through Z-axis coil  */
    int16_t coil_temp_x;  /**< Measured temperature in X-axis coil  */
    int16_t coil_temp_y;  /**< Measured temperature in Y-axis coil  */
    int16_t coil_temp_z;  /**< Measured temperature in Z-axis coil  */
    int16_t MCU_temp;     /**< Temperature measurement of the MCU  */
};
#endif

#if TEST
        struct libtm_iMTQ_housekeeping_data *hk_data = sensor_data;
        printf("%d %d %d %d %d %d %d %d %d %d %d\n", hk_data->dig_volt, hk_data->analog_volt, hk_data->dig_curr,
               hk_data->analog_curr, hk_data->meas_curr_x,
               hk_data->meas_curr_y, hk_data->meas_curr_z,
               hk_data->coil_temp_x, hk_data->coil_temp_y,
               hk_data->coil_temp_z, hk_data->MCU_temp);
#endif

#endif

#if TEST
        printf("%f %f %f\n", ((float *)sensor_packet.data)[0], ((float *)sensor_packet.data)[1], ((float *)sensor_packet.data)[2]);
#endif